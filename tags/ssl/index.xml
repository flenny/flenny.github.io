<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ssl on ping.flenny.net</title>
    <link>https://ping.flenny.net/tags/ssl/</link>
    <description>Recent content in Ssl on ping.flenny.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>oliver.gut@flenny.net (Oliver Gut)</managingEditor>
    <webMaster>oliver.gut@flenny.net (Oliver Gut)</webMaster>
    <lastBuildDate>Tue, 15 Mar 2016 14:33:21 +0100</lastBuildDate>
    <atom:link href="https://ping.flenny.net/tags/ssl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Secure your website by adding some HTTP security headers with NGINX</title>
      <link>https://ping.flenny.net/2016/secure-your-website-by-adding-some-http-security-headers-with-nginx/</link>
      <pubDate>Tue, 15 Mar 2016 14:33:21 +0100</pubDate>
      <author>oliver.gut@flenny.net (Oliver Gut)</author>
      <guid>https://ping.flenny.net/2016/secure-your-website-by-adding-some-http-security-headers-with-nginx/</guid>
      <description>


&lt;figure class=&#34;pull-right&#34;&gt;
    
        &lt;img src=&#34;https://ping.flenny.net/images/post/secure-http-headers.svg&#34; alt=&#34;A&amp;#43;&#34; width=&#34;190em&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In order to make your site a more secure place, it&amp;rsquo;s recommended to add
some HTTP security headers into your web servers response. Without going to much
into detail here, the aim of this blog post is to give you a basic NGINX configuration.
For more detailed information visit 
&lt;a target=&#34;_blank&#34; href=&#34;https://scotthelme.co.uk/&#34;&gt;Scott Helme&amp;rsquo;s blog&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.
He did a pretty good job explaining all different types of HTTP security headers.&lt;/p&gt;

&lt;h2 id=&#34;x-frame-options:7716eaf7b90e07d9cbf4fc81df028463&#34;&gt;X-Frame-Options&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;X-Frame-Options&lt;/code&gt; specifies whether your browser allows framing your site
into another site. You can &lt;code&gt;DENY&lt;/code&gt;, allow only from &lt;code&gt;SAMEORIGIN&lt;/code&gt; or
&lt;code&gt;ALLOW-FROM https://a.specific.site.com/&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;add_header X-Frame-Options SAMEORIGIN;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;x-content-type-options:7716eaf7b90e07d9cbf4fc81df028463&#34;&gt;X-Content-Type-Options&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;nosniff&lt;/code&gt; your browser is enforced to use the content-type declared by
your server. It helps reducing the risk of so-called drive-by downloads.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;add_header X-Content-Type-Options nosniff;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;x-xss-protection:7716eaf7b90e07d9cbf4fc81df028463&#34;&gt;X-XSS-Protection&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;X-XSS-Protection&lt;/code&gt; enables Cross-site scripting (XSS) filter built-in into most browsers.
Although this option is enabled by default, it&amp;rsquo;s recommend to re-enable and hence reduce the risk
in which malicious scripts are injected to your site.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;add_header X-XSS-Protection &amp;quot;1; mode=block&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;content-security-policy:7716eaf7b90e07d9cbf4fc81df028463&#34;&gt;Content-Security-Policy&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Content-Security-Policy&lt;/code&gt; defines approved sources your browser may load content from.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;add_header Content-Security-Policy &amp;quot;default-src https:
    data: &#39;unsafe-inline&#39; &#39;unsafe-eval&#39;;&amp;quot; always;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;strict-transport-security:7716eaf7b90e07d9cbf4fc81df028463&#34;&gt;Strict-Transport-Security&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Strict-Transport-Security&lt;/code&gt; enforces your browser to use HTTPS over regular HTTP.
Use HTTPS over HTTP everywhere and anytime. Even if it&amp;rsquo;s a simple personal blog.
You can get a free SSL certificate at 
&lt;a target=&#34;_blank&#34; href=&#34;https://www.startssl.com/&#34;&gt;StartCom&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.
Not long ago, Google also started favoring HTTPS sites in search results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;add_header Strict-Transport-Security &amp;quot;max-age=31536000;
    includeSubdomains&amp;quot; always;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;public-key-pins:7716eaf7b90e07d9cbf4fc81df028463&#34;&gt;Public-Key-Pins&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;Public-Key-Pins&lt;/code&gt; your able to tell your browser in which identities he should trust.
It protects your site from man-in-the-middle attacks and in case if your certificate authority is compromised.
The easiest way to get your appropriate key-pins is by running a test at

&lt;a target=&#34;_blank&#34; href=&#34;https://www.ssllabs.com/ssltest/&#34;&gt;SSL LABS&lt;/a&gt; &lt;i class=&#34;fa fa-external-link&#34;&gt;&lt;/i&gt;.
The pins are part of the result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;add_header Public-Key-Pins &#39;pin-sha256=&amp;quot;xxx&amp;quot;; pin-sha256=&amp;quot;yyy&amp;quot;;
    pin-sha256=&amp;quot;zzz&amp;quot;; max-age=2592000; includeSubDomains&#39; always;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Redirect HTTP to HTTPS with URL rewrite module in IIS</title>
      <link>https://ping.flenny.net/2016/http-to-https-with-url-rewrite-module-in-iis/</link>
      <pubDate>Thu, 18 Feb 2016 14:04:50 +0100</pubDate>
      <author>oliver.gut@flenny.net (Oliver Gut)</author>
      <guid>https://ping.flenny.net/2016/http-to-https-with-url-rewrite-module-in-iis/</guid>
      <description>
&lt;figure class=&#34;img-responsive center-block&#34;&gt;
    
        &lt;img src=&#34;https://ping.flenny.net/images/post/logo/iis.png&#34; alt=&#34;IIS 9&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;First download &lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkId=255386&#34;&gt;Microsoft&amp;rsquo;s Web Platform Installer 5.0&lt;/a&gt;.
It&amp;rsquo;s a free tool that makes getting the latest components for Internet Information Services (IIS) easy. In Web Platform Installer search for &amp;lsquo;url rewrite&amp;rsquo; and and install the one and only search result &amp;lsquo;URL Rewrite 2.0&amp;rsquo;. Restart IIS in order to make URL Rewrite module visible as shown below.&lt;/p&gt;


&lt;figure class=&#34;img-responsive center-block&#34;&gt;
    
        &lt;img src=&#34;https://ping.flenny.net/images/post/iis-rewrite-module.png&#34; alt=&#34;IIS URL Rewrite module&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Create a new blank rule with the following adjustments (leave default values):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;: e.g. &amp;lsquo;Redirect to HTTPS&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Match URL&lt;/strong&gt;: Request URL matches the pattern using regular expressions. Pattern: &lt;code&gt;(.*)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Conditions&lt;/strong&gt;: Add new. Condition input &lt;code&gt;{HTTPS}&lt;/code&gt;, pattern &lt;code&gt;^OFF$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Action&lt;/strong&gt;: Action type Redirect, Redirect URL &lt;code&gt;https://{HTTP_HOST}/{R:1}&lt;/code&gt; redirect type 303&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apply and go back to rules overview.&lt;/p&gt;

&lt;p&gt;
&lt;figure class=&#34;img-responsive center-block&#34;&gt;
    
        &lt;img src=&#34;https://ping.flenny.net/images/post/iis-rewrite-module-001.png&#34; alt=&#34;IIS URL Rewrite module&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t forget to clear &amp;lsquo;Require SSL&amp;rsquo; checkbox in SSL settings in order to make the redirect working properly.&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redirect any subdomain http or https to a single subdomain with NGINX</title>
      <link>https://ping.flenny.net/2016/nginx-redirect-any-subdomain-http-or-https-to-a-single-subdomain/</link>
      <pubDate>Wed, 03 Feb 2016 19:37:18 +0100</pubDate>
      <author>oliver.gut@flenny.net (Oliver Gut)</author>
      <guid>https://ping.flenny.net/2016/nginx-redirect-any-subdomain-http-or-https-to-a-single-subdomain/</guid>
      <description>
&lt;figure class=&#34;img-responsive center-block&#34;&gt;
    
        &lt;img src=&#34;https://ping.flenny.net/images/post/logo/nginx.png&#34; alt=&#34;NGINX&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Today I had a use case where I wanted to redirect any subdomain at any scheme (http or https) to a single https subdomain &lt;a href=&#34;https://ping.flenny.net&#34;&gt;https://ping.flenny.net&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.flenny.net&#34;&gt;http://blog.flenny.net&lt;/a&gt; should redirect to &lt;a href=&#34;https://ping.flenny.net&#34;&gt;https://ping.flenny.net&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.flenny.net&#34;&gt;https://www.flenny.net&lt;/a&gt; should redirect to &lt;a href=&#34;https://ping.flenny.net&#34;&gt;https://ping.flenny.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to redirect both schemes (http and https) to a single subdomain you have to setup two &lt;code&gt;server&lt;/code&gt; blocks. The first one catches all the traffic to any scheme (&lt;code&gt;listen 80;  listen 443&lt;/code&gt;) at any subdomain (&lt;code&gt;*.flenny.net&lt;/code&gt;). The second one listens only on port &lt;code&gt;443&lt;/code&gt; and the specific subdomain &lt;code&gt;ping.flenny.net&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;	server {
		listen 80;
		listen 443 ssl;
		server_name *.flenny.net;
		return 301 https://ping.flenny.net$request_uri;
	}
	
	server {
		listen 443 default ssl;
		server_name ping.flenny.net;
		
		root /var/www/flenny;
		index index.html index.htm;
	
		ssl on;
		ssl_certificate			path/to/ssl.crt;
		ssl_certificate_key		path/to/ssl.key;
				
		location / {
			proxy_pass https://x.y.z;
		}
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a specific port you can only have one ssl configuration section (&lt;code&gt;ssl_certificate&lt;/code&gt;, &lt;code&gt;ssl_certificate_key&lt;/code&gt;). As shown in the example above use the keyword &lt;code&gt;default&lt;/code&gt; to flag the appropriate &lt;code&gt;server&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; In order to properly redirect e.g. &lt;a href=&#34;https://blog.flenny.net&#34;&gt;https://blog.flenny.net&lt;/a&gt; to &lt;a href=&#34;https://ping.flenny.net&#34;&gt;https://ping.flenny.net&lt;/a&gt; you must have a valid ssl certificate for both subdomains.&lt;/p&gt;

&lt;p&gt;A full example of a working NGINX configuration you can get &lt;a href=&#34;https://gist.github.com/flenny/de4b6ab465ed5b1c6886&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>